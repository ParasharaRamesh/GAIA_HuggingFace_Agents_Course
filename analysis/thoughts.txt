Todo:

* Refer to one of the submissions ->

     - https://huggingface.co/spaces/fisherman611/gaia-agent
* create template from (https://huggingface.co/spaces/agents-course/Final_Assignment_Template)
    - figure out how to integrate with github for private development locally
    - looks like calling the submit button / api submits everything
* understand how to submit ( especially how will hugging face take care of the tokens )
    - https://huggingface.co/learn/agents-course/unit4/hands-on
    - https://agents-course-unit4-scoring.hf.space/docs
* go through the dataset and see how I would solve level1 -> level3
* Find out what are all the tools needed (make a list)
    - Then find out all of the tools from the langchain tool integration which can solve this
        . visionagent
        . websearch
        . reasoning model?
        . some kind of rag indexing

Important Links:

* https://huggingface.co/datasets/gaia-benchmark/GAIA
* https://huggingface.co/learn/agents-course/unit4/introduction
* https://huggingface.co/blog/open-deep-research
* https://github.com/huggingface/smolagents/blob/main/examples/open_deep_research/scripts/text_inspector_tool.py


High Level Thoughts:

* Refer to hugging face's approach to solving GAIA and replicate in langgraph (https://github.com/huggingface/smolagents/tree/main/examples/open_deep_research)
* Refer to that articule from langgraph which talks about how to build multi agent systems (swarm)
* Can use a codeagent as one of the tools:
    - codeAgent from smolagents hugging face
    - can use langgraph's tools:
        . https://python.langchain.com/docs/integrations/tools/ (Riza Code Interpreter)
* Go