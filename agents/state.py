import operator
from typing import TypedDict, List, Dict, Any, Union, Literal, Optional, Annotated
from datetime import datetime
import inspect

# --- Enums/Literals for State Attributes ---

"""
Literal type to indicate the agent's status at each entry point of the history. Crucial for debugging/audit purposes
"""
HistoryEntryStatus = Literal["SUCCESS", "FAILED", "SKIPPED", "IN_PROGRESS"]

class HistoryEntry(TypedDict):
    """
    A chronological, append-only record of significant operations within the workflow.
    This serves as an audit trail for debugging, re-planning, and understanding the agent's journey.

    Attributes:
        agent_name (str): The name of the agent that performed the action (e.g., "Planner", "Researcher").
        timestamp (str): ISO 8601 formatted timestamp of when the action occurred.
        input (Any): The input received by the agent for this specific operation.
        output (Any): The output produced by the agent for this specific operation.
        status (HistoryEntryStatus): The outcome status of the operation (e.g., "SUCCESS", "FAILED").
        tool_calls (Optional[List[Dict]]): A list of tool calls made during this operation, if any.
        error (Optional[str]): Any error message if the operation failed.
    """
    agent_name: str
    timestamp: str
    input: Any
    output: Any
    status: HistoryEntryStatus
    tool_calls: Optional[List[Dict]]
    error: Optional[str]


# --- Main AgentState TypedDict ---

class AgentState(TypedDict):
    """
    Represents the overall mutable state of the agentic workflow.
    This state is passed between nodes and updated by them to maintain context
    and track progress towards solving the user's query.

    Attributes:
        query (str): The original user query that initiated the workflow.
        file_path (Optional[str]): An optional file path provided by the user, if relevant to the query.

        high_level_roadmap (Annotated[List[str], operator.add]):
            A list of high-level strategic steps (e.g., "Research Topic X", "Implement Feature Y").
            This is generated by the Planner and guides the overall progress.
            The Planner moves through this roadmap step-by-step. Replanning of this roadmap is not expected.

        current_roadmap_step_index (int):
            The index of the current high-level step from `high_level_roadmap`
            that the Planner is actively working on.

        active_agent_name (Optional[str]):
            The name of the specialized agent (e.g., "Researcher", "CodeAgent")
            currently assigned by the Planner to execute a sub-task for the current
            `high_level_roadmap` step.

        active_agent_task (Optional[str]):
            The specific, detailed sub-task or instruction given by the Planner
            to the `active_agent_name` for the current `high_level_roadmap` step.

        active_agent_output (Any):
            The most recent output received from the `active_agent_name`
            in response to `active_agent_task`. This output is then evaluated by the Planner.

        planner_feedback (Optional[str]):
            The Planner's feedback or critique on the `active_agent_output`.
            If the output is unsatisfactory, this feedback guides the active agent
            to refine its output or indicates a need for the Planner to re-issue the task.

        conversation_history_with_agent (Annotated[List[Dict[str, str]], operator.add]):
            A chronological log of the back-and-forth conversation between the Planner
            and the currently active specialized agent regarding the `active_agent_task`.
            Each entry should be a dictionary with 'role' (e.g., 'planner', 'agent') and 'message'.
            This history is typically reset when moving to a new `active_agent_name` or `active_agent_task`.

        history (Annotated[List["HistoryEntry"], operator.add]):
            A comprehensive, chronological audit log of all significant actions, inputs, and outputs
            from executed nodes across the entire workflow. This is distinct from `conversation_history_with_agent`
            as it records high-level workflow events, not detailed conversational turns for one sub-task.

        final_answer (Optional[str]):
            The final, synthesized answer to the `query`, populated by the `final_agent`
            once all necessary steps are completed and verified.

        active_agent_error_message (Optional[str]):
            A detailed message populated by the active agent if it encounters a critical error
            during the execution of its `active_agent_task`. This signals a need for the Planner
            to potentially adjust the `active_agent_task`, provide more specific feedback,
            or, if the error is unrecoverable for the current agent, route to the `generic_agent`.
    """
    query: str
    file_path: Optional[str]
    high_level_roadmap: Annotated[List[str], operator.add]
    current_roadmap_step_index: int
    active_agent_name: Optional[str]
    active_agent_task: Optional[str]
    active_agent_output: Any
    planner_feedback: Optional[str]
    conversation_history_with_agent: Annotated[List[Dict[str, str]], operator.add]
    history: Annotated[List["HistoryEntry"], operator.add]
    final_answer: Optional[str]
    active_agent_error_message: Optional[str]

