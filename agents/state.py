import operator
from typing import TypedDict, List, Dict, Any, Union, Literal, Optional, Annotated
from datetime import datetime
import inspect

"""
Literal type to indicate the agent's status at each entry point of the history. Crucial for debugging/audit purposes
"""
HistoryEntryStatus = Literal["SUCCESS", "FAILED", "SKIPPED", "IN_PROGRESS"]


class HistoryEntry(TypedDict):
    """
    A chronological, append-only record of significant operations within the workflow.
    This serves as an audit trail for debugging, re-planning, and understanding the agent's journey.

    Attributes:
        agent_name (str): The name of the agent that performed the action (e.g., "Planner", "Researcher").
        timestamp (str): ISO 8601 formatted timestamp of when the action occurred.
        input (Any): The input received by the agent for this specific operation.
        output (Any): The output produced by the agent for this specific operation.
        status (HistoryEntryStatus): The outcome status of the operation (e.g., "SUCCESS", "FAILED").
        tool_calls (Optional[List[Dict]]): A list of tool calls made during this operation, if any.
        error (Optional[str]): Any error message if the operation failed.
    """
    agent_name: str
    timestamp: str
    input: Any
    output: Any
    status: HistoryEntryStatus
    tool_calls: Optional[List[Dict]]
    error: Optional[str]


class AgentState(TypedDict):
    """
    Represents the state of the multi-agent workflow at any given point.
    This state is passed between nodes in the LangGraph, accumulating information.

    Attributes:
        query (str): The initial user query that triggered the workflow.

        file_path (Optional[str]):
            The path to a file provided by the user, if the query involves file analysis
            (e.g., for CodeAgent to read, or VisualAgent to analyze).

        high_level_roadmap (Annotated[List[str], operator.add]):
            A dynamic list of high-level steps or sub-queries generated by the Planner
            to address the main `query`. Steps are appended as planning progresses.

        current_roadmap_step_index (int):
            An index indicating which step in the `high_level_roadmap` the agents are
            currently working on. Useful for tracking progress.

        active_agent_name (Optional[str]):
            The name of the agent currently designated by the Planner to execute a task.
            Used by routers to direct workflow.

        active_agent_task (Optional[str]):
            The specific task assigned by the Planner to the `active_agent_name`.
            This is the immediate goal for the specialized agent.

        active_agent_output (Any):
            The output generated by the `active_agent_name` after completing its task.
            This could be text, data, or a description of actions taken.

        active_agent_guidance (Optional[str]):
            This field is populated by the Planner to provide specific guidance to the
            `active_agent_name`.
            - Initially, it can contain a comma-separated string of substeps for `active_agent_task`.
            - In subsequent interactions (e.g., after an error), it can contain corrective feedback,
              revised substeps, or specific instructions for the `active_agent_name`.

        conversation_history_with_agent (Annotated[List[Dict[str, str]], operator.add]):
            A detailed, turn-by-turn conversation history specific to the *currently active*
            sub-task with a specialized agent. This is reset or managed per sub-task.

        history (Annotated[List["HistoryEntry"], operator.add]):
            A comprehensive, chronological audit log of all significant actions, inputs, and outputs
            from executed nodes across the entire workflow. This is distinct from `conversation_history_with_agent`
            as it records high-level workflow events, not detailed conversational turns for one sub-task.

        final_answer (Optional[str]):
            The final, synthesized answer to the `query`, populated by the `final_agent`
            once all necessary steps are completed and verified.

        active_agent_error_message (Optional[str]):
            A detailed message populated by the active agent if it encounters a critical error
            during the execution of its `active_agent_task`. This signals a need for the Planner
            to potentially adjust the `active_agent_task`, provide more specific feedback,
            or, if the error is unrecoverable for the current agent, route to the `final_agent`.
    """
    query: str
    file_path: Optional[str]
    high_level_roadmap: Annotated[List[str], operator.add]
    current_roadmap_step_index: int
    active_agent_name: Optional[str]
    active_agent_task: Optional[str]
    active_agent_output: Any
    active_agent_guidance: Optional[str] # Renamed and clarified purpose
    conversation_history_with_agent: Annotated[List[Dict[str, str]], operator.add]
    history: Annotated[List["HistoryEntry"], operator.add]
    final_answer: Optional[str]
    active_agent_error_message: Optional[str]


class PlannerOutput(TypedDict):
    """
    Structured output from the PlannerAgent's LLM, providing explicit directives
    for the next step in the multi-agent workflow. This output drives routing
    and task assignments for subsequent agents.

    Attributes:
        next_agent (Literal): The name of the next agent to route to in the LangGraph workflow.
                              Possible values include "researcher_agent", "audio_agent", "code_agent",
                              "visual_agent", "final_agent"
        next_task (str): A concise, specific task description that the `next_agent`
                         is expected to execute in the upcoming step.
        active_agent_guidance (str): Supplementary guidance or specific instructions
                                     for the `next_agent` to help it effectively
                                     accomplish its `next_task`. This field serves
                                     to refine the task or provide contextual hints.
        increment_roadmap_step (bool): A boolean flag indicating whether the Planner
                                       has determined that the current high-level
                                       roadmap step has been successfully completed.
                                       If True, the orchestrator logic will advance
                                       the `current_roadmap_step_index` in the global `AgentState`.
    """
    next_agent: Literal["researcher_agent", "audio_agent", "code_agent", "visual_agent", "final_agent"]
    next_task: str
    active_agent_guidance: str
    increment_roadmap_step: bool